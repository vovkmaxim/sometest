<?php
Основы ветвления и слияния

Давайте рассмотрим ветвление и слияние на простом примере с таким процессом работы, который вы могли бы использовать в настоящей разработке. Мы выполним следующие шаги:

    Поработаем над веб-сайтом.
    Создадим ветку для работы над новой задачей.
    Выполним некоторую работу на этой ветке.

На этом этапе вам поступит звонок о том, что сейчас критична другая проблема, и её надо срочно решить. Мы сделаем следующее:

    Вернёмся на ветку для версии в производстве.
    Создадим ветку для исправления ошибки.
    После тестирования ветки с исправлением сольём её обратно и отправим в продакшн.
    Вернёмся к своей исходной задаче и продолжим работать над ней.


echo 'Hello Git! :)';
















Теперь вы получаете звонок о том, 
        что есть проблема с веб-сайтом,
        которую необходимо немедленно устранить. 
        С Git'ом вам нет нужды делать исправления 
        для неё поверх тех изменений, которые вы уже сделали в iss53,
        и нет необходимости прикладывать много усилий для отмены этих изменений перед тем, 
        как вы сможете начать работать над решением срочной проблемы. Всё, что вам нужно сделать, 
        это перейти на ветку master.

Однако, прежде чем сделать это,
        учтите, что если в вашем рабочем каталоге
        или индексе имеются незафиксированные изменения,
        которые конфликтуют с веткой, на которую вы переходите, Git не позволит переключить ветки.
        Лучше всего при переключении веток иметь чистое рабочее состояние. Существует несколько способов
        добиться этого (а именно, прятанье (stash) работы и правка (amend) коммита), которые мы рассмотрим позже.
        А на данный момент представим, что все изменения были добавлены в коммит, 
        и теперь вы можете переключиться обратно на ветку master:

$ git checkout master
Switched to branch "master"

Те


